name: "Git Mirrors"

on:
  # TODO: `on: push` is only for quick debugging
  push:
    branches:
      - master
    paths:
      - ".github/actions/git-mirror/index.js"
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  'mirror':
    # continue-on-error: true
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        'json':
          - |
            {
              "name": "beautifulsoup"
            }

    name: "Mirror `${{ fromJSON(matrix['json'])['name'] }}`"
  
    environment:
      name: "${{ format('mirror--{0}', fromJSON(matrix['json'])['name']) }}"
      url:  >
        ${{ format('https://github.com/{0}/{1}',
              github.repository_owner,
              fromJSON(matrix['json'])['name']
        )}}

    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@main'

      - uses: 'actions/create-github-app-token@v1'
        id: 'app-token'
        with:
          'app-id': ${{ vars['PUSH_APP_ID'] }}
          'private-key': ${{ secrets['PUSH_APP_PRIVATE_KEY'] }}
          'owner': ${{ github.repository_owner }}
          'repositories': "${{ fromJSON(matrix['json'])['name'] }}"

      - name: "Get GitHub App / Bot User ID"
        id: 'get-bot-user-id'
        uses: 'actions/github-script@v7'
        with:
          # github-token: ${{ steps['app-token'].outputs['token'] }}
          script: |
            github.rest.users.getByUsername({
              username: `${process.env['app-slug']}[bot]`
            })
            .then(response => {
              core.setOutput('bot-user-id', response.data.id)
            })
        env:
          app-slug: ${{ steps['app-token'].outputs['app-slug'] }}

      - name: "Set Up the GitHub App / Bot as a Git User"
        shell: bash --noprofile --norc -euo pipefail -x  {0}
        run: |
          git config --global  user.name   "${APP_SLUG}[bot]"
          git config --global  user.email  "${BOT_USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
        env:
          APP_SLUG:    ${{ steps['app-token'].outputs['app-slug'] }}
          BOT_USER_ID: ${{ steps['get-bot-user-id'].outputs['bot-user-id'] }}
      
      - id: 'mirror'
        uses: './.github/actions/git-mirror'
        with:
          'source-repo-url':     ${{ vars['SOURCE_REPO_URL'] }}
          'target-github-repo':  ${{ vars['TARGET_GITHUB_REPO'] || fromJSON(matrix['json'])['name'] }}
          'target-ssh-key':      ${{ secrets['TARGET_SSH_KEY'] }}
          'target-token':        ${{ secrets['TARGET_TOKEN'] || steps['app-token'].outputs['token'] }}

      - name: "Log mirroring step metadata"
        if: ${{ always() }}
        shell: bash
        run: |
          echo "${MIRROR_STEP_JSON}" | jq -C .
        env:
          MIRROR_STEP_JSON: ${{ toJSON(steps['mirror']) }}
